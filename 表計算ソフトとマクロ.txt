Step01 h表計算ソフトとマクロ

１．表計算ソフト：IT業界に限らず、事務作業で必須と言って過言ではないツール

	標準搭載されているプログラミング言語:ExcelVBA
	⇒習得成果）Excelに仕事をさせることができる。
		・事務系作業の生産性の改善
		・仕事の選択範囲が開発業務にまで拡大
		
		
・マクロとVBA
	コンピュータに仕事させるための作業手順書：プログラム
	⇒その手順書で使用する言語：プログラミング言語の「例」java,VB
	
アプリケーションに限定したプログラム：マクロ

	⇒VBA：visual basic  for application
	
	汎用性のあるプログラミングの言語の実行環境を「アプリケーション」に限定した言語
	
	
	
２．マクロの活用

	人間		：状況を理解しながら、うまく対処する
	コンピュータ：手順がはっきりしている仕事のみ対処できる
	⇒手順書が必要：対象となる仕事が手順化されていないと作成できない
	↓
	↓処理速度が速く、正確に処理できる
	↓
	①作業の自動化、効率化
	　日々業務（定型業務）の時短化に有効！
	　
	②作業の専門家、高機能化
	　内政アプリの開発に有効！
	　⇒予算が限られている場合、マクロでシステムを構築する。

3.環境構築の前準備
	プログラムを悪用されることもあるので、セキリュティを設定する必要がある。
	↓
	↓セキュリティレベルを高くしすぎるとプログラムが実行できなくなる
	↓安全性と利便性の両方を満たすセキュリティレベルに設定する！
	↓
	セキュリティセンターの設定
	⇒ファイル＞オプション
	⇒セキュリティセンター＞セキュリティセンターの設定＞マクロの設定
	⇒警告を無視してすべてのマクロを無効にする「既定の設定」
４．まずは体験してみよう「演習」

	「準備」作業ファイルの入手
	・情報演習31ステップ３０　excelVBAワークブック
	https://www.cutt.jp/books/excelvba_835/

	[ファイル]Ex01.xlsm
	[内容]アンケート調査の回答データを質問項目ごとの集計をするマクロ「定義シート」

	①ー
	[関数]COUNTIF関数の活用
	⇒条件に当てはまるセルの数をカウントする関数

	「書式」=COUNTIF（範囲,検索条件）
	②
	「ピボットテーブル」マウス操作だけで集計作業ができる機能
	準備）タイトルを１行に成形する
	手順）	１．対象となるテーブルの任意のセルを選択
		２．挿入＞ピボットテーブル
			⇒テーブルはんいうぁ自動設定される（要確認）
			⇒配置場所を選択する（任意）
		３．F1フィールトを列ボックスへドラッグ
		４。ｆ１フィールドを値ボックスへドラッグ
			⇒値フィールドの設定＞集計方法-データ個数
		５。ｆ１フィールドを値ボックスへドラッグ
			⇒値フィールドの設定＞集計方法-データ個数＞計算の種類ー総計に対する比率	
		６。列ボックスの値フィールドを行ボックスへドラッグ

	
「体験を終えて」
※関数ｖｓマクロではなく、関数のデメリット面をＶＢＡで補強する！

・すべて関数で行おうとすると･･･複雑な処理を実現するために、関数の入れ子構造になる
	⇒修正・把握が大変
・仕込んであった関数を消される可能性がある。
	⇒ファイルが重くなる。「シートの保護」機能の活用が日露！
・シートに関数を仕込むため、ほかのファイルで再利用しにくい。

Step０２　キー記録マクロ

・Excelの処理自体がすでに他純化されている！
	⇒excelの諸色は手作業でも、多くは手順化されている
	⇒手順化された作業をあsる規則に従って記録すれば、プログラムになる

「ｐ。１０」step02.xlsx	自作
「p.11」縦書きの変更方法
	「テキスト」「セルの書士s気設定」ダイアログボックスを仕様
	「本訓練」「配置」グループ「方向ボタンを活用


[ｐ。１２]マクロブックの保存
	・Ｅｘｃｅｌ2007以降）	　マクロ機能を持ったファイルは通常のファイル形式絵は保存できないようになっている。
	・Excel２００３以前）	通常のファイル形式でマクロ機能を持ったファイルも保存できる。←マクロ・ウィルス感染の一員


Step03 マクロの正体と編集

「p.014」「Step02.xlsm」をコピーし、「Step03.xlsm」にリネームする。
「p.016」With文（オブジェクトごとに命令を整理できる構文）
「書式」Withオブジェクト
		.プロパティ=値
		End With

・With　～　EndWithの間で、文の最初に.（ドット）が記述されると、自動的にその前にWithで指定したオブジェクトがあるとみなされる。
	⇒オブジェクト.プロパティ＝値と同じ意味になる！

[p.017]３．４マクロの修正
・「ExcelVBAリファレンス」の活用例
⇒google：[ExcelVBAドキュメント]
⇒「Excel Visual Basic for Apprications(VBA)リファレンス」をクリック
⇒メニュー＞Excel＞オブジェクトモデル
⇒Rangeオブジェクト＞プロパティ-Orientation

[Orientation]プロパティ
	・プロパティの値は、-90~90度の整数値、または「XIOrientation」定数のいずれかを設定できる。
		⇒xIVertical,xIHorizontalなど


Step04 計算と変数

	ｐ。０２０」　４．３マクロの構成
	「ＶＢＡ」					「Ｊａｖａ」
	モジュール（マクロを記述する場所＝用紙）　		クラス
	プロシージャ（実行単位）				メソッド
	処理文							処理文

	「p｡０21」あ１参照形式からR1C1参照形式への変更方法

	「p.022」4.7変数の宣言
		
		ＶＢＡの変数宣言は宣言した時点で自動的に0が代入されている。

	「書式」Dim変数名Asデータ型	[Javaでは]
	「p.023」Integer:約+-3万	short
		Long:約+-21億		int

	[注１]宣言を省略した場合、Variant型として扱われる！
		⇒Variant型は整数を代入すべき箇所で文字列を代入してもエラーにはならないため、論理エラーを引き起こしやすい！
		⇒必要に応じたデータ型を定義したい
		「ｐ。０１９」「変数の宣言を強制する」設定を有効にしておく！
	
	「注２」変数の宣言と初期化は同時にはできない。2行に分ける必要がある。
		×Ｄｉｍ　変数ＡｓＩｎｔｅｇｅｒ=10
		◎ＤＩｍ　変数ＡｓＩｎｔｅｇｅｒ
			  変数　＝　１０
		ただし、コロンを（：）使って、複数行を1行で記述することは可能。
		◎Ｄｉｍ　変数Ａｓ　Ｉｎｔｅｇｅｒ：　変数　＝１０


Ｓｔｅｐ０５　定数
	
	★「注意」
	ｐ。26　定数とは、変数のように名前ではなく、値そのもので表します。
		↑の説明ではリテラルの説明になるため説明がへん0
		
	microsoftofficeリファレンス：https://docs.microsoft.com/ja-jp/office/vba/language/concepts/
	によれば
	定数を宣言すると、値にわかりやすい名前を割り当てることができます。（略）
	定数を宣言した後に、変更したり新しい値を割り当てたりすることはできません。
	
	「書式」定数宣言）Const 定数名	Ａｓ　型名　＝　値　

	★判断（else文は省略可）
	「書式１」Ｉｆ条件式Ｔｈｅｎ命令１else命令２			←1行表記
	「注意」関係演算子）等しい：＝、等しくない：＜＞		←ＶＢＡ
				　　＝＝	　　！＝		←Ｊａｖａ

	「書式２」①ＩＦ条件Then	②Ｉｆ条件１Ｔｈｅｎ
			命令			命令１
					　ＥｌｓｅＩＦ条件２Ｔｈｅｎ
						命令２
		　　Ｅｌｓｅ　　	　Ｅｌｓｅ
			命令２			命令３
		　　ＥｎｄＩＦ		　Endif				←IF文の終わりを明記！
			
	★場合分け
	「書式」ＳｅｌｅｃｔＣａｓｅ変数
	Ｃａｓｅ値
	命令１
	…		←Javaのbreak文に相当する命令は、不要！
	Ｃａｓｅ値２
	命令２
	…		
	Ｃａｓｅ値３
	命令３		←該当なしの場合、JＡＶＡのdefaultラベルのような新たなラベルは不要！
	ＥｎｄＳｅｌｅｃｔ

	※ＪＡＶＡの場合、break文を省略することで、ラベルをまとめることができる。
	　同様のことがＶＢＡでも可能。
	
	「例」ＣＡＳＥｘ,ｙ	←列挙
	　　　ＣＡＳＥｘ　To　z	←範囲

Ｓｔｅｐ０６　回数による繰り返し文
	
	「書式」Ｄｉｍ変数名ＡＳデータ型
		ＦＯＲ		変数名 ＝　初期値　ＴＯ		終値Ｓｔｅｐ増減値
		ＮＥＸＴ	変数　←ＥＮＤ文ではない！「終わり」ではなく「繰り返す」ことを表す！
	「ＪＡＶＡ」for（データ型　変数名　＝　初期値；　変数名　＜＝　終値；増減値）｛	
			命令
			｝
	
Step06.xlsm
	Sub 合計()
'
 ' Dim Dn, I As Integer　　←　この記述では、ＩのみInteger型と宣言され、DnはVariant型と宣言される（p.114参照）
 Dim Dn As Integer, I As Integer
  Dim Sl As String
  Dim Tot As Long

  Cells(2, 6).Select
  Selection.ClearContents
  
  Sl = Cells(2, 3).Value
  Tot = 0
  Dn = Range("B4").CurrentRegion.End(xlDown).Row

  
  For I = 5 To Dn
    If Cells(I, 3).Value = Sl Then
      Tot = Tot + Cells(I, 4).Value * Cells(I, 5).Value
    End If
   Next I
  Cells(2, 6).Value = Tot
  
End Sub

[p.033][Step06.xlsm]
・変数名について
※テキストのような変数名の付け方は非推奨
	
	Ｄｎ：DataNumbers
	Sl:Select
	Tot:Total

可読性が極めて悪い。。。

⇒変数に格納さ入れている値の情報を予想しやすい名前をつけるべきである。
		
・データ型について
	
	Dim Dn,I As Integer　←　だめ
	
	Dnは未宣言となるため、Variant型となる。[p.114],リファレンス

●集計表の最終行の求め方

	変数名　＝　ＲＡＮＧＥ（範囲）.ＣｕｒｒｅｎｔREgion.End（Xldown）.Row
	①起点となるセルを含む
	②連続領域の
	③最終セルの
	④行数を取得

★キーボード操作で再現
	①表内の任意のセルをアクティブセルにする
	②Ctrl + Shift + *
	③End + ↓

[p.035]②ローカル変数の内容

※ＪＡＶＡと異なり、変数宣言した時点で、データ型にしたがたった規定値が格納される。
	⇒Step06.xlsmのＴｏｔは初期化しなくても問題なく動作する
	　が、慣習として初期化は記述することを推奨する。

※変数Dnは、変数宣言の記述からもわかるように、Variant型になっている。
	⇒/の後の型は、実際に格納されているデータ型が表記される。

Step07 関数とその使い方

①Excel関数（ワーク氏0と関数）・Excelに用意されている関数
※セルオブジェクトの数式プロパティに”関数を指定”してExcelに処理を依頼する


	セルに直接入力する関数を「文字列」で指定する。
「例」
Activecell.Formula	＝"SUM()"範囲:A1参照形式
Activecell.FormulaR1C1　＝"SUM()"範囲:R1C1参照形式

②VBA関数			・VBA言語に用意されている関数
※マクロの中で使用する。
「例」
Dim d As Integer
d = Int (Rnd()*6)+1	Int関数:小数点以下を切り捨てて整数を求める
			Rnd関数:0以上1未満の実数を発生する
